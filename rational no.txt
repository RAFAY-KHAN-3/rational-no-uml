from math import gcd

class RationalNumber:
    def __init__(self, numerator, denominator):
        if denominator == 0:
            raise ValueError("Denominator cannot be zero.")
        self.numerator = numerator
        self.denominator = denominator
        self.simplify()

    def simplify(self):
        common = gcd(self.numerator, self.denominator)
        self.numerator //= common
        self.denominator //= common

    def add(self, other):
        new_num = self.numerator * other.denominator + other.numerator * self.denominator
        new_den = self.denominator * other.denominator
        return RationalNumber(new_num, new_den)

    def subtract(self, other):
        new_num = self.numerator * other.denominator - other.numerator * self.denominator
        new_den = self.denominator * other.denominator
        return RationalNumber(new_num, new_den)

    def multiply(self, other):
        return RationalNumber(self.numerator * other.numerator,
                              self.denominator * other.denominator)

    def divide(self, other):
        if other.numerator == 0:
            raise ZeroDivisionError("Cannot divide by zero.")
        return RationalNumber(self.numerator * other.denominator,
                              self.denominator * other.numerator)

    def __str__(self):
        return f"{self.numerator}/{self.denominator}"

# Example usage
r1 = RationalNumber(8, 3)
r2 = RationalNumber(4, 5)
print("Addition:", r1.add(r2))
print("Multiplication:", r1.multiply(r2))
